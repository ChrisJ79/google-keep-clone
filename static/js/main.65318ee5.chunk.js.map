{"version":3,"sources":["Components/Header/Header.jsx","Components/CreateArea/CreateArea.jsx","Components/Note/Note.jsx","Components/Footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","CreateArea","props","useState","isExpanded","setExpanded","title","content","note","setNote","handleChange","event","target","name","value","prevNote","type","placeholder","onChange","rows","onClick","Zoom","in","Fab","onAdd","preventDefault","Note","onDelete","id","currentYear","Date","getFullYear","Footer","App","notes","setNotes","deleteNote","prevNotes","filter","noteItem","index","newNote","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8QAWeA,G,MANA,kBACX,yBAAKC,UAAU,UACX,oD,gDC8DOC,MA9Df,SAAoBC,GAAQ,IAAD,EAEWC,oBAAS,GAFpB,mBAEhBC,EAFgB,KAEJC,EAFI,OAICF,mBAAS,CAC7BG,MAAO,GACPC,QAAS,KANU,mBAIhBC,EAJgB,KAIVC,EAJU,KASvB,SAASC,EAAaC,GAAQ,IAAD,EACFA,EAAMC,OAAtBC,EADkB,EAClBA,KAAMC,EADY,EACZA,MACbL,GAAQ,SAAAM,GACJ,OAAO,eACAA,EADP,eAEKF,EAAOC,OAkBpB,OACI,6BACI,0BAAMd,UAAU,eACfI,EACG,2BACIY,KAAK,OACLH,KAAK,QACLC,MAAON,EAAKF,MACZW,YAAY,QACZC,SAAUR,IACT,KAEL,8BACIG,KAAK,UACLC,MAAON,EAAKD,QACZU,YAAY,iBACZE,KAAMf,EAAa,EAAI,EACvBc,SAAUR,EACVU,QAtBpB,WACIf,GAAY,MAuBA,kBAACgB,EAAA,EAAD,CAAMC,GAAIlB,GACN,kBAACmB,EAAA,EAAD,CAAKH,QAlCrB,SAAoBT,GAChBT,EAAMsB,MAAMhB,GACZC,EAAQ,CACJH,MAAO,GACPC,QAAQ,KAEZI,EAAMc,mBA6BU,kBAAC,IAAD,W,iBCvCTC,MAjBf,SAAcxB,GAMV,OACI,yBAAKF,UAAU,QACX,4BAAKE,EAAMI,OACX,2BAAIJ,EAAMK,SACV,4BAAQa,QARhB,WACIlB,EAAMyB,SAASzB,EAAM0B,MAQb,kBAAC,IAAD,SCZVC,GAAc,IAAIC,MAAOC,cAQhBC,EANA,kBACX,4BAAQhC,UAAU,UACd,6CAAgB6B,KCmCTI,MAnCf,WAAgB,IAAD,EAEW9B,mBAAS,IAFpB,mBAER+B,EAFQ,KAEDC,EAFC,KAUb,SAASC,EAAWR,GAClBO,GAAS,SAAAE,GACP,OAAOA,EAAUC,QAAO,SAACC,EAAUC,GACjC,OAAOA,IAAUZ,QAKvB,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYwB,MAjBhB,SAAiBiB,GACfN,GAAS,SAAAE,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAsBI,UAgBrBP,EAAMQ,KAAI,SAACH,EAAUC,GAAX,OACP,kBAAC,EAAD,CACEG,IAAKH,EACLZ,GAAIY,EACJlC,MAAOiC,EAASjC,MAChBC,QAASgC,EAAShC,QAClBoB,SAAUS,OAGhB,kBAAC,EAAD,QC3BcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.65318ee5.chunk.js","sourcesContent":["import React from 'react';\nimport '../../App.css';\n\n\n\nconst Header = () => (\n    <div className=\"header\">\n        <h1>Google Keep Clone</h1>\n    </div>\n)\n\nexport default Header;","import React, {useState} from 'react';\n\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport Zoom from '@material-ui/core/Zoom';\n\n\nfunction CreateArea(props) {\n\n    const [isExpanded, setExpanded] = useState(false);\n\n    const [note, setNote] = useState({\n        title: \"\",\n        content: \"\"\n    }); \n\n    function handleChange(event) {\n        const {name, value} =  event.target;\n        setNote(prevNote => {\n            return {\n                ...prevNote,\n                [name]: value\n            }\n        })\n    }\n\n    function submitNote(event) {\n        props.onAdd(note); \n        setNote({\n            title: \"\",\n            content:\"\"\n        });\n        event.preventDefault();\n    }\n\nfunction expand() {\n    setExpanded(true);\n}\n\n    return (\n        <div>\n            <form className=\"create-note\">\n            {isExpanded ? \n                <input \n                    type=\"text\" \n                    name=\"title\" \n                    value={note.title} \n                    placeholder=\"Title\"\n                    onChange={handleChange}\n                /> : null}\n                    \n                <textarea \n                    name=\"content\" \n                    value={note.content} \n                    placeholder=\"Take a note...\" \n                    rows={isExpanded ? 3 : 1} \n                    onChange={handleChange}\n                    onClick={expand}\n                />\n                <Zoom in={isExpanded}>\n                    <Fab onClick={submitNote}>\n                        <AddIcon />\n                    </Fab>\n                </Zoom>\n            </form>\n        </div>\n    );\n}\n\nexport default CreateArea;","import React from 'react';\nimport '../../App.css';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nfunction Note(props) {\n\n    function handleClick() {\n        props.onDelete(props.id);\n    }\n\n    return (\n        <div className=\"note\">\n            <h1>{props.title}</h1>\n            <p>{props.content}</p>\n            <button onClick={handleClick}>\n                <DeleteIcon />\n            </button>\n        </div>\n    );\n}\n\nexport default Note;","import React from 'react';\nimport '../../App.css';\n\n\nconst currentYear = new Date().getFullYear();\n\nconst Footer = () => (\n    <footer className=\"footer\">\n        <p>Copyright Â© {currentYear}</p>\n    </footer>\n)\n\nexport default Footer;\n","import React, {useState} from 'react';\nimport Header from './Components/Header/Header';\nimport CreateArea from './Components/CreateArea/CreateArea';\nimport Note from './Components/Note/Note';\nimport Footer from './Components/Footer/Footer';\nimport './App.css';\n\n\nfunction App() {\n\nconst [notes, setNotes] = useState([]);\n\n  function addNote(newNote) {\n    setNotes(prevNotes => {\n      return [...prevNotes, newNote]\n    })\n  }\n\n  function deleteNote(id) {\n    setNotes(prevNotes => {\n      return prevNotes.filter((noteItem, index) => {\n        return index !== id;\n      })\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <CreateArea onAdd={addNote}/>\n      {notes.map((noteItem, index) => (\n          <Note\n            key={index}\n            id={index}\n            title={noteItem.title}\n            content={noteItem.content}\n            onDelete={deleteNote}\n          />\n      ))}\n      <Footer />\n    </div>\n  )}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}