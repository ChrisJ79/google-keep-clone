{"version":3,"sources":["Components/Header/Header.jsx","Components/Note/Note.jsx","Components/Footer/Footer.jsx","notes.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","Note","props","title","content","currentYear","Date","getFullYear","Footer","notes","key","App","Notes","map","noteItem","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAWeA,G,UANA,kBACX,yBAAKC,UAAU,UACX,oDCGOC,EAPF,SAACC,GAAD,OACT,yBAAKF,UAAU,QACX,4BAAKE,EAAMC,OACX,2BAAID,EAAME,WCFZC,GAAc,IAAIC,MAAOC,cAQhBC,EANA,kBACX,4BAAQR,UAAU,UACd,6CAAgBK,KCyBPI,EAhCH,CACV,CACEC,IAAK,EACLP,MAAO,aACPC,QACE,4GAEJ,CACEM,IAAK,EACLP,MAAO,QACPC,QACE,oHAEJ,CACEM,IAAK,EACLP,MAAO,SACPC,QACE,4EAEJ,CACEM,IAAK,EACLP,MAAO,wBACPC,QACE,0IAEJ,CACEM,IAAK,EACLP,MAAO,YACPC,QAAS,mBCPAO,EAdH,kBACV,yBAAKX,UAAU,OACb,kBAAC,EAAD,MACCY,EAAMC,KAAI,SAAAC,GAAQ,OACf,kBAAC,EAAD,CACEJ,IAAKI,EAASC,GACdZ,MAAOW,EAASX,MAChBC,QAASU,EAASV,aAGxB,kBAAC,EAAD,QCNgBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0ff15102.chunk.js","sourcesContent":["import React from 'react';\nimport '../../App.css';\n\n\n\nconst Header = () => (\n    <div className=\"header\">\n        <h1>Google Keep Clone</h1>\n    </div>\n)\n\nexport default Header;","import React from 'react';\nimport '../../App.css';\n\nconst Note = (props) => (\n    <div className=\"note\">\n        <h1>{props.title}</h1>\n        <p>{props.content}</p>\n    </div>\n)\n\nexport default Note;","import React from 'react';\nimport '../../App.css';\n\n\nconst currentYear = new Date().getFullYear();\n\nconst Footer = () => (\n    <footer className=\"footer\">\n        <p>Copyright © {currentYear}</p>\n    </footer>\n)\n\nexport default Footer;\n","\nconst notes = [\n    {\n      key: 1,\n      title: \"Delegation\",\n      content:\n        \"Q. How many programmers does it take to change a light bulb? A. None – It’s a hardware problem\"\n    },\n    {\n      key: 2,\n      title: \"Loops\",\n      content:\n        \"How to keep a programmer in the shower forever. Show him the shampoo bottle instructions: Lather. Rinse. Repeat.\"\n    },\n    {\n      key: 3,\n      title: \"Arrays\",\n      content:\n        \"Q. Why did the programmer quit his job? A. Because he didn't get arrays.\"\n    },\n    {\n      key: 4,\n      title: \"Hardware vs. Software\",\n      content:\n        \"What's the difference between hardware and software? You can hit your hardware with a hammer, but you can only curse at your software.\"\n    },\n    {\n      key: 5,\n      title: \"Big ideas\",\n      content: \"Eat more sushi\"\n    }\n  ];\n  \n  export default notes;","import React from 'react';\nimport Header from './Components/Header/Header';\nimport Note from './Components/Note/Note';\nimport Footer from './Components/Footer/Footer';\nimport Notes from './notes';\nimport './App.css';\n\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    {Notes.map(noteItem => (\n        <Note\n          key={noteItem.id}\n          title={noteItem.title}\n          content={noteItem.content}\n        />\n    ))}\n    <Footer />\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n    //1. Create a new React app.\n    //2. Create a App.jsx component.\n    //3. Create a Header.jsx component that renders a <header> element\n    //to show the Keeper App name in an <h1>.\n    //4. Create a Footer.jsx component that renders a <footer> element\n    //to show a copyright message in a <p> with a dynamically updated year.\n    //5. Create a Note.jsx component to show a <div> element with a\n    //<h1> for a title and a <p> for the content.\n//6. Make sure that the final website is styled like the example shown here:\n//https://l1pp6.csb.app/\n\n//HINT: You will need to study the classes in teh styles.css file to appy styling."],"sourceRoot":""}